# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CheckCookieResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, email: str=None, family_name: str=None, given_name: str=None, name: str=None, sub: str=None):  # noqa: E501
        """CheckCookieResults - a model defined in Swagger

        :param email: The email of this CheckCookieResults.  # noqa: E501
        :type email: str
        :param family_name: The family_name of this CheckCookieResults.  # noqa: E501
        :type family_name: str
        :param given_name: The given_name of this CheckCookieResults.  # noqa: E501
        :type given_name: str
        :param name: The name of this CheckCookieResults.  # noqa: E501
        :type name: str
        :param sub: The sub of this CheckCookieResults.  # noqa: E501
        :type sub: str
        """
        self.swagger_types = {
            'email': str,
            'family_name': str,
            'given_name': str,
            'name': str,
            'sub': str
        }

        self.attribute_map = {
            'email': 'email',
            'family_name': 'family_name',
            'given_name': 'given_name',
            'name': 'name',
            'sub': 'sub'
        }
        self._email = email
        self._family_name = family_name
        self._given_name = given_name
        self._name = name
        self._sub = sub

    @classmethod
    def from_dict(cls, dikt) -> 'CheckCookieResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The check_cookie_results of this CheckCookieResults.  # noqa: E501
        :rtype: CheckCookieResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self) -> str:
        """Gets the email of this CheckCookieResults.


        :return: The email of this CheckCookieResults.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this CheckCookieResults.


        :param email: The email of this CheckCookieResults.
        :type email: str
        """

        self._email = email

    @property
    def family_name(self) -> str:
        """Gets the family_name of this CheckCookieResults.


        :return: The family_name of this CheckCookieResults.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name: str):
        """Sets the family_name of this CheckCookieResults.


        :param family_name: The family_name of this CheckCookieResults.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def given_name(self) -> str:
        """Gets the given_name of this CheckCookieResults.


        :return: The given_name of this CheckCookieResults.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name: str):
        """Sets the given_name of this CheckCookieResults.


        :param given_name: The given_name of this CheckCookieResults.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def name(self) -> str:
        """Gets the name of this CheckCookieResults.


        :return: The name of this CheckCookieResults.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CheckCookieResults.


        :param name: The name of this CheckCookieResults.
        :type name: str
        """

        self._name = name

    @property
    def sub(self) -> str:
        """Gets the sub of this CheckCookieResults.


        :return: The sub of this CheckCookieResults.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub: str):
        """Sets the sub of this CheckCookieResults.


        :param sub: The sub of this CheckCookieResults.
        :type sub: str
        """

        self._sub = sub
