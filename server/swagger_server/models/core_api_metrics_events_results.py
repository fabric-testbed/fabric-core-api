# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CoreApiMetricsEventsResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event: str=None, event_date: datetime=None, event_triggered_by: str=None, event_type: str=None, people_uuid: str=None, project_is_public: bool=None, project_uuid: str=None):  # noqa: E501
        """CoreApiMetricsEventsResults - a model defined in Swagger

        :param event: The event of this CoreApiMetricsEventsResults.  # noqa: E501
        :type event: str
        :param event_date: The event_date of this CoreApiMetricsEventsResults.  # noqa: E501
        :type event_date: datetime
        :param event_triggered_by: The event_triggered_by of this CoreApiMetricsEventsResults.  # noqa: E501
        :type event_triggered_by: str
        :param event_type: The event_type of this CoreApiMetricsEventsResults.  # noqa: E501
        :type event_type: str
        :param people_uuid: The people_uuid of this CoreApiMetricsEventsResults.  # noqa: E501
        :type people_uuid: str
        :param project_is_public: The project_is_public of this CoreApiMetricsEventsResults.  # noqa: E501
        :type project_is_public: bool
        :param project_uuid: The project_uuid of this CoreApiMetricsEventsResults.  # noqa: E501
        :type project_uuid: str
        """
        self.swagger_types = {
            'event': str,
            'event_date': datetime,
            'event_triggered_by': str,
            'event_type': str,
            'people_uuid': str,
            'project_is_public': bool,
            'project_uuid': str
        }

        self.attribute_map = {
            'event': 'event',
            'event_date': 'event_date',
            'event_triggered_by': 'event_triggered_by',
            'event_type': 'event_type',
            'people_uuid': 'people_uuid',
            'project_is_public': 'project_is_public',
            'project_uuid': 'project_uuid'
        }
        self._event = event
        self._event_date = event_date
        self._event_triggered_by = event_triggered_by
        self._event_type = event_type
        self._people_uuid = people_uuid
        self._project_is_public = project_is_public
        self._project_uuid = project_uuid

    @classmethod
    def from_dict(cls, dikt) -> 'CoreApiMetricsEventsResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The core_api_metrics_events_results of this CoreApiMetricsEventsResults.  # noqa: E501
        :rtype: CoreApiMetricsEventsResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self) -> str:
        """Gets the event of this CoreApiMetricsEventsResults.


        :return: The event of this CoreApiMetricsEventsResults.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event: str):
        """Sets the event of this CoreApiMetricsEventsResults.


        :param event: The event of this CoreApiMetricsEventsResults.
        :type event: str
        """

        self._event = event

    @property
    def event_date(self) -> datetime:
        """Gets the event_date of this CoreApiMetricsEventsResults.


        :return: The event_date of this CoreApiMetricsEventsResults.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date: datetime):
        """Sets the event_date of this CoreApiMetricsEventsResults.


        :param event_date: The event_date of this CoreApiMetricsEventsResults.
        :type event_date: datetime
        """

        self._event_date = event_date

    @property
    def event_triggered_by(self) -> str:
        """Gets the event_triggered_by of this CoreApiMetricsEventsResults.


        :return: The event_triggered_by of this CoreApiMetricsEventsResults.
        :rtype: str
        """
        return self._event_triggered_by

    @event_triggered_by.setter
    def event_triggered_by(self, event_triggered_by: str):
        """Sets the event_triggered_by of this CoreApiMetricsEventsResults.


        :param event_triggered_by: The event_triggered_by of this CoreApiMetricsEventsResults.
        :type event_triggered_by: str
        """

        self._event_triggered_by = event_triggered_by

    @property
    def event_type(self) -> str:
        """Gets the event_type of this CoreApiMetricsEventsResults.


        :return: The event_type of this CoreApiMetricsEventsResults.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this CoreApiMetricsEventsResults.


        :param event_type: The event_type of this CoreApiMetricsEventsResults.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def people_uuid(self) -> str:
        """Gets the people_uuid of this CoreApiMetricsEventsResults.


        :return: The people_uuid of this CoreApiMetricsEventsResults.
        :rtype: str
        """
        return self._people_uuid

    @people_uuid.setter
    def people_uuid(self, people_uuid: str):
        """Sets the people_uuid of this CoreApiMetricsEventsResults.


        :param people_uuid: The people_uuid of this CoreApiMetricsEventsResults.
        :type people_uuid: str
        """

        self._people_uuid = people_uuid

    @property
    def project_is_public(self) -> bool:
        """Gets the project_is_public of this CoreApiMetricsEventsResults.


        :return: The project_is_public of this CoreApiMetricsEventsResults.
        :rtype: bool
        """
        return self._project_is_public

    @project_is_public.setter
    def project_is_public(self, project_is_public: bool):
        """Sets the project_is_public of this CoreApiMetricsEventsResults.


        :param project_is_public: The project_is_public of this CoreApiMetricsEventsResults.
        :type project_is_public: bool
        """

        self._project_is_public = project_is_public

    @property
    def project_uuid(self) -> str:
        """Gets the project_uuid of this CoreApiMetricsEventsResults.


        :return: The project_uuid of this CoreApiMetricsEventsResults.
        :rtype: str
        """
        return self._project_uuid

    @project_uuid.setter
    def project_uuid(self, project_uuid: str):
        """Sets the project_uuid of this CoreApiMetricsEventsResults.


        :param project_uuid: The project_uuid of this CoreApiMetricsEventsResults.
        :type project_uuid: str
        """

        self._project_uuid = project_uuid
