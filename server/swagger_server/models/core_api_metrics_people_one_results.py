# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CoreApiMetricsPeopleOneResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: bool=None, affiliation: str=None, email: str=None, google_scholar: str=None, last_updated: datetime=None, name: str=None, registered_on: datetime=None, roles: List[str]=None, scopus: str=None, uuid: str=None):  # noqa: E501
        """CoreApiMetricsPeopleOneResults - a model defined in Swagger

        :param active: The active of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type active: bool
        :param affiliation: The affiliation of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type affiliation: str
        :param email: The email of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type email: str
        :param google_scholar: The google_scholar of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type google_scholar: str
        :param last_updated: The last_updated of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type last_updated: datetime
        :param name: The name of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type name: str
        :param registered_on: The registered_on of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type registered_on: datetime
        :param roles: The roles of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type roles: List[str]
        :param scopus: The scopus of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type scopus: str
        :param uuid: The uuid of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'active': bool,
            'affiliation': str,
            'email': str,
            'google_scholar': str,
            'last_updated': datetime,
            'name': str,
            'registered_on': datetime,
            'roles': List[str],
            'scopus': str,
            'uuid': str
        }

        self.attribute_map = {
            'active': 'active',
            'affiliation': 'affiliation',
            'email': 'email',
            'google_scholar': 'google_scholar',
            'last_updated': 'last_updated',
            'name': 'name',
            'registered_on': 'registered_on',
            'roles': 'roles',
            'scopus': 'scopus',
            'uuid': 'uuid'
        }
        self._active = active
        self._affiliation = affiliation
        self._email = email
        self._google_scholar = google_scholar
        self._last_updated = last_updated
        self._name = name
        self._registered_on = registered_on
        self._roles = roles
        self._scopus = scopus
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'CoreApiMetricsPeopleOneResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The core_api_metrics_people_one_results of this CoreApiMetricsPeopleOneResults.  # noqa: E501
        :rtype: CoreApiMetricsPeopleOneResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this CoreApiMetricsPeopleOneResults.


        :return: The active of this CoreApiMetricsPeopleOneResults.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this CoreApiMetricsPeopleOneResults.


        :param active: The active of this CoreApiMetricsPeopleOneResults.
        :type active: bool
        """

        self._active = active

    @property
    def affiliation(self) -> str:
        """Gets the affiliation of this CoreApiMetricsPeopleOneResults.


        :return: The affiliation of this CoreApiMetricsPeopleOneResults.
        :rtype: str
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation: str):
        """Sets the affiliation of this CoreApiMetricsPeopleOneResults.


        :param affiliation: The affiliation of this CoreApiMetricsPeopleOneResults.
        :type affiliation: str
        """

        self._affiliation = affiliation

    @property
    def email(self) -> str:
        """Gets the email of this CoreApiMetricsPeopleOneResults.


        :return: The email of this CoreApiMetricsPeopleOneResults.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this CoreApiMetricsPeopleOneResults.


        :param email: The email of this CoreApiMetricsPeopleOneResults.
        :type email: str
        """

        self._email = email

    @property
    def google_scholar(self) -> str:
        """Gets the google_scholar of this CoreApiMetricsPeopleOneResults.


        :return: The google_scholar of this CoreApiMetricsPeopleOneResults.
        :rtype: str
        """
        return self._google_scholar

    @google_scholar.setter
    def google_scholar(self, google_scholar: str):
        """Sets the google_scholar of this CoreApiMetricsPeopleOneResults.


        :param google_scholar: The google_scholar of this CoreApiMetricsPeopleOneResults.
        :type google_scholar: str
        """

        self._google_scholar = google_scholar

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this CoreApiMetricsPeopleOneResults.


        :return: The last_updated of this CoreApiMetricsPeopleOneResults.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this CoreApiMetricsPeopleOneResults.


        :param last_updated: The last_updated of this CoreApiMetricsPeopleOneResults.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self) -> str:
        """Gets the name of this CoreApiMetricsPeopleOneResults.


        :return: The name of this CoreApiMetricsPeopleOneResults.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CoreApiMetricsPeopleOneResults.


        :param name: The name of this CoreApiMetricsPeopleOneResults.
        :type name: str
        """

        self._name = name

    @property
    def registered_on(self) -> datetime:
        """Gets the registered_on of this CoreApiMetricsPeopleOneResults.


        :return: The registered_on of this CoreApiMetricsPeopleOneResults.
        :rtype: datetime
        """
        return self._registered_on

    @registered_on.setter
    def registered_on(self, registered_on: datetime):
        """Sets the registered_on of this CoreApiMetricsPeopleOneResults.


        :param registered_on: The registered_on of this CoreApiMetricsPeopleOneResults.
        :type registered_on: datetime
        """

        self._registered_on = registered_on

    @property
    def roles(self) -> List[str]:
        """Gets the roles of this CoreApiMetricsPeopleOneResults.


        :return: The roles of this CoreApiMetricsPeopleOneResults.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles: List[str]):
        """Sets the roles of this CoreApiMetricsPeopleOneResults.


        :param roles: The roles of this CoreApiMetricsPeopleOneResults.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def scopus(self) -> str:
        """Gets the scopus of this CoreApiMetricsPeopleOneResults.


        :return: The scopus of this CoreApiMetricsPeopleOneResults.
        :rtype: str
        """
        return self._scopus

    @scopus.setter
    def scopus(self, scopus: str):
        """Sets the scopus of this CoreApiMetricsPeopleOneResults.


        :param scopus: The scopus of this CoreApiMetricsPeopleOneResults.
        :type scopus: str
        """

        self._scopus = scopus

    @property
    def uuid(self) -> str:
        """Gets the uuid of this CoreApiMetricsPeopleOneResults.


        :return: The uuid of this CoreApiMetricsPeopleOneResults.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this CoreApiMetricsPeopleOneResults.


        :param uuid: The uuid of this CoreApiMetricsPeopleOneResults.
        :type uuid: str
        """

        self._uuid = uuid
