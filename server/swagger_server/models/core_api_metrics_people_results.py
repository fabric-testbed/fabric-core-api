# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CoreApiMetricsPeopleResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: bool=None, google_scholar: str=None, last_updated: datetime=None, scopus: str=None, uuid: str=None):  # noqa: E501
        """CoreApiMetricsPeopleResults - a model defined in Swagger

        :param active: The active of this CoreApiMetricsPeopleResults.  # noqa: E501
        :type active: bool
        :param google_scholar: The google_scholar of this CoreApiMetricsPeopleResults.  # noqa: E501
        :type google_scholar: str
        :param last_updated: The last_updated of this CoreApiMetricsPeopleResults.  # noqa: E501
        :type last_updated: datetime
        :param scopus: The scopus of this CoreApiMetricsPeopleResults.  # noqa: E501
        :type scopus: str
        :param uuid: The uuid of this CoreApiMetricsPeopleResults.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'active': bool,
            'google_scholar': str,
            'last_updated': datetime,
            'scopus': str,
            'uuid': str
        }

        self.attribute_map = {
            'active': 'active',
            'google_scholar': 'google_scholar',
            'last_updated': 'last_updated',
            'scopus': 'scopus',
            'uuid': 'uuid'
        }
        self._active = active
        self._google_scholar = google_scholar
        self._last_updated = last_updated
        self._scopus = scopus
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'CoreApiMetricsPeopleResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The core_api_metrics_people_results of this CoreApiMetricsPeopleResults.  # noqa: E501
        :rtype: CoreApiMetricsPeopleResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this CoreApiMetricsPeopleResults.


        :return: The active of this CoreApiMetricsPeopleResults.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this CoreApiMetricsPeopleResults.


        :param active: The active of this CoreApiMetricsPeopleResults.
        :type active: bool
        """

        self._active = active

    @property
    def google_scholar(self) -> str:
        """Gets the google_scholar of this CoreApiMetricsPeopleResults.


        :return: The google_scholar of this CoreApiMetricsPeopleResults.
        :rtype: str
        """
        return self._google_scholar

    @google_scholar.setter
    def google_scholar(self, google_scholar: str):
        """Sets the google_scholar of this CoreApiMetricsPeopleResults.


        :param google_scholar: The google_scholar of this CoreApiMetricsPeopleResults.
        :type google_scholar: str
        """

        self._google_scholar = google_scholar

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this CoreApiMetricsPeopleResults.


        :return: The last_updated of this CoreApiMetricsPeopleResults.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this CoreApiMetricsPeopleResults.


        :param last_updated: The last_updated of this CoreApiMetricsPeopleResults.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def scopus(self) -> str:
        """Gets the scopus of this CoreApiMetricsPeopleResults.


        :return: The scopus of this CoreApiMetricsPeopleResults.
        :rtype: str
        """
        return self._scopus

    @scopus.setter
    def scopus(self, scopus: str):
        """Sets the scopus of this CoreApiMetricsPeopleResults.


        :param scopus: The scopus of this CoreApiMetricsPeopleResults.
        :type scopus: str
        """

        self._scopus = scopus

    @property
    def uuid(self) -> str:
        """Gets the uuid of this CoreApiMetricsPeopleResults.


        :return: The uuid of this CoreApiMetricsPeopleResults.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this CoreApiMetricsPeopleResults.


        :param uuid: The uuid of this CoreApiMetricsPeopleResults.
        :type uuid: str
        """

        self._uuid = uuid
