# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CoreApiMetricsProjectsOneResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: bool=None, communities: List[str]=None, created_date: datetime=None, expires_on: datetime=None, last_updated: datetime=None, name: str=None, project_is_public: bool=None, project_creators: List[str]=None, project_members: List[str]=None, project_owners: List[str]=None, project_type: str=None, retired_date: datetime=None, storage: List[str]=None, tags: List[str]=None, token_holders: List[str]=None, uuid: str=None):  # noqa: E501
        """CoreApiMetricsProjectsOneResults - a model defined in Swagger

        :param active: The active of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type active: bool
        :param communities: The communities of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type communities: List[str]
        :param created_date: The created_date of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type created_date: datetime
        :param expires_on: The expires_on of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type expires_on: datetime
        :param last_updated: The last_updated of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type last_updated: datetime
        :param name: The name of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type name: str
        :param project_is_public: The project_is_public of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type project_is_public: bool
        :param project_creators: The project_creators of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type project_creators: List[str]
        :param project_members: The project_members of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type project_members: List[str]
        :param project_owners: The project_owners of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type project_owners: List[str]
        :param project_type: The project_type of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type project_type: str
        :param retired_date: The retired_date of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type retired_date: datetime
        :param storage: The storage of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type storage: List[str]
        :param tags: The tags of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type tags: List[str]
        :param token_holders: The token_holders of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type token_holders: List[str]
        :param uuid: The uuid of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'active': bool,
            'communities': List[str],
            'created_date': datetime,
            'expires_on': datetime,
            'last_updated': datetime,
            'name': str,
            'project_is_public': bool,
            'project_creators': List[str],
            'project_members': List[str],
            'project_owners': List[str],
            'project_type': str,
            'retired_date': datetime,
            'storage': List[str],
            'tags': List[str],
            'token_holders': List[str],
            'uuid': str
        }

        self.attribute_map = {
            'active': 'active',
            'communities': 'communities',
            'created_date': 'created_date',
            'expires_on': 'expires_on',
            'last_updated': 'last_updated',
            'name': 'name',
            'project_is_public': 'project_is_public',
            'project_creators': 'project_creators',
            'project_members': 'project_members',
            'project_owners': 'project_owners',
            'project_type': 'project_type',
            'retired_date': 'retired_date',
            'storage': 'storage',
            'tags': 'tags',
            'token_holders': 'token_holders',
            'uuid': 'uuid'
        }
        self._active = active
        self._communities = communities
        self._created_date = created_date
        self._expires_on = expires_on
        self._last_updated = last_updated
        self._name = name
        self._project_is_public = project_is_public
        self._project_creators = project_creators
        self._project_members = project_members
        self._project_owners = project_owners
        self._project_type = project_type
        self._retired_date = retired_date
        self._storage = storage
        self._tags = tags
        self._token_holders = token_holders
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'CoreApiMetricsProjectsOneResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The core_api_metrics_projects_one_results of this CoreApiMetricsProjectsOneResults.  # noqa: E501
        :rtype: CoreApiMetricsProjectsOneResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this CoreApiMetricsProjectsOneResults.


        :return: The active of this CoreApiMetricsProjectsOneResults.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this CoreApiMetricsProjectsOneResults.


        :param active: The active of this CoreApiMetricsProjectsOneResults.
        :type active: bool
        """

        self._active = active

    @property
    def communities(self) -> List[str]:
        """Gets the communities of this CoreApiMetricsProjectsOneResults.


        :return: The communities of this CoreApiMetricsProjectsOneResults.
        :rtype: List[str]
        """
        return self._communities

    @communities.setter
    def communities(self, communities: List[str]):
        """Sets the communities of this CoreApiMetricsProjectsOneResults.


        :param communities: The communities of this CoreApiMetricsProjectsOneResults.
        :type communities: List[str]
        """

        self._communities = communities

    @property
    def created_date(self) -> datetime:
        """Gets the created_date of this CoreApiMetricsProjectsOneResults.


        :return: The created_date of this CoreApiMetricsProjectsOneResults.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date: datetime):
        """Sets the created_date of this CoreApiMetricsProjectsOneResults.


        :param created_date: The created_date of this CoreApiMetricsProjectsOneResults.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def expires_on(self) -> datetime:
        """Gets the expires_on of this CoreApiMetricsProjectsOneResults.


        :return: The expires_on of this CoreApiMetricsProjectsOneResults.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on: datetime):
        """Sets the expires_on of this CoreApiMetricsProjectsOneResults.


        :param expires_on: The expires_on of this CoreApiMetricsProjectsOneResults.
        :type expires_on: datetime
        """

        self._expires_on = expires_on

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this CoreApiMetricsProjectsOneResults.


        :return: The last_updated of this CoreApiMetricsProjectsOneResults.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this CoreApiMetricsProjectsOneResults.


        :param last_updated: The last_updated of this CoreApiMetricsProjectsOneResults.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self) -> str:
        """Gets the name of this CoreApiMetricsProjectsOneResults.


        :return: The name of this CoreApiMetricsProjectsOneResults.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CoreApiMetricsProjectsOneResults.


        :param name: The name of this CoreApiMetricsProjectsOneResults.
        :type name: str
        """

        self._name = name

    @property
    def project_is_public(self) -> bool:
        """Gets the project_is_public of this CoreApiMetricsProjectsOneResults.


        :return: The project_is_public of this CoreApiMetricsProjectsOneResults.
        :rtype: bool
        """
        return self._project_is_public

    @project_is_public.setter
    def project_is_public(self, project_is_public: bool):
        """Sets the project_is_public of this CoreApiMetricsProjectsOneResults.


        :param project_is_public: The project_is_public of this CoreApiMetricsProjectsOneResults.
        :type project_is_public: bool
        """

        self._project_is_public = project_is_public

    @property
    def project_creators(self) -> List[str]:
        """Gets the project_creators of this CoreApiMetricsProjectsOneResults.


        :return: The project_creators of this CoreApiMetricsProjectsOneResults.
        :rtype: List[str]
        """
        return self._project_creators

    @project_creators.setter
    def project_creators(self, project_creators: List[str]):
        """Sets the project_creators of this CoreApiMetricsProjectsOneResults.


        :param project_creators: The project_creators of this CoreApiMetricsProjectsOneResults.
        :type project_creators: List[str]
        """

        self._project_creators = project_creators

    @property
    def project_members(self) -> List[str]:
        """Gets the project_members of this CoreApiMetricsProjectsOneResults.


        :return: The project_members of this CoreApiMetricsProjectsOneResults.
        :rtype: List[str]
        """
        return self._project_members

    @project_members.setter
    def project_members(self, project_members: List[str]):
        """Sets the project_members of this CoreApiMetricsProjectsOneResults.


        :param project_members: The project_members of this CoreApiMetricsProjectsOneResults.
        :type project_members: List[str]
        """

        self._project_members = project_members

    @property
    def project_owners(self) -> List[str]:
        """Gets the project_owners of this CoreApiMetricsProjectsOneResults.


        :return: The project_owners of this CoreApiMetricsProjectsOneResults.
        :rtype: List[str]
        """
        return self._project_owners

    @project_owners.setter
    def project_owners(self, project_owners: List[str]):
        """Sets the project_owners of this CoreApiMetricsProjectsOneResults.


        :param project_owners: The project_owners of this CoreApiMetricsProjectsOneResults.
        :type project_owners: List[str]
        """

        self._project_owners = project_owners

    @property
    def project_type(self) -> str:
        """Gets the project_type of this CoreApiMetricsProjectsOneResults.


        :return: The project_type of this CoreApiMetricsProjectsOneResults.
        :rtype: str
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type: str):
        """Sets the project_type of this CoreApiMetricsProjectsOneResults.


        :param project_type: The project_type of this CoreApiMetricsProjectsOneResults.
        :type project_type: str
        """

        self._project_type = project_type

    @property
    def retired_date(self) -> datetime:
        """Gets the retired_date of this CoreApiMetricsProjectsOneResults.


        :return: The retired_date of this CoreApiMetricsProjectsOneResults.
        :rtype: datetime
        """
        return self._retired_date

    @retired_date.setter
    def retired_date(self, retired_date: datetime):
        """Sets the retired_date of this CoreApiMetricsProjectsOneResults.


        :param retired_date: The retired_date of this CoreApiMetricsProjectsOneResults.
        :type retired_date: datetime
        """

        self._retired_date = retired_date

    @property
    def storage(self) -> List[str]:
        """Gets the storage of this CoreApiMetricsProjectsOneResults.


        :return: The storage of this CoreApiMetricsProjectsOneResults.
        :rtype: List[str]
        """
        return self._storage

    @storage.setter
    def storage(self, storage: List[str]):
        """Sets the storage of this CoreApiMetricsProjectsOneResults.


        :param storage: The storage of this CoreApiMetricsProjectsOneResults.
        :type storage: List[str]
        """

        self._storage = storage

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this CoreApiMetricsProjectsOneResults.


        :return: The tags of this CoreApiMetricsProjectsOneResults.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this CoreApiMetricsProjectsOneResults.


        :param tags: The tags of this CoreApiMetricsProjectsOneResults.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def token_holders(self) -> List[str]:
        """Gets the token_holders of this CoreApiMetricsProjectsOneResults.


        :return: The token_holders of this CoreApiMetricsProjectsOneResults.
        :rtype: List[str]
        """
        return self._token_holders

    @token_holders.setter
    def token_holders(self, token_holders: List[str]):
        """Sets the token_holders of this CoreApiMetricsProjectsOneResults.


        :param token_holders: The token_holders of this CoreApiMetricsProjectsOneResults.
        :type token_holders: List[str]
        """

        self._token_holders = token_holders

    @property
    def uuid(self) -> str:
        """Gets the uuid of this CoreApiMetricsProjectsOneResults.


        :return: The uuid of this CoreApiMetricsProjectsOneResults.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this CoreApiMetricsProjectsOneResults.


        :param uuid: The uuid of this CoreApiMetricsProjectsOneResults.
        :type uuid: str
        """

        self._uuid = uuid
