# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CoreApiMetricsProjectsResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: bool=None, last_updated: datetime=None, project_is_public: bool=None, project_type: str=None, uuid: str=None):  # noqa: E501
        """CoreApiMetricsProjectsResults - a model defined in Swagger

        :param active: The active of this CoreApiMetricsProjectsResults.  # noqa: E501
        :type active: bool
        :param last_updated: The last_updated of this CoreApiMetricsProjectsResults.  # noqa: E501
        :type last_updated: datetime
        :param project_is_public: The project_is_public of this CoreApiMetricsProjectsResults.  # noqa: E501
        :type project_is_public: bool
        :param project_type: The project_type of this CoreApiMetricsProjectsResults.  # noqa: E501
        :type project_type: str
        :param uuid: The uuid of this CoreApiMetricsProjectsResults.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'active': bool,
            'last_updated': datetime,
            'project_is_public': bool,
            'project_type': str,
            'uuid': str
        }

        self.attribute_map = {
            'active': 'active',
            'last_updated': 'last_updated',
            'project_is_public': 'project_is_public',
            'project_type': 'project_type',
            'uuid': 'uuid'
        }
        self._active = active
        self._last_updated = last_updated
        self._project_is_public = project_is_public
        self._project_type = project_type
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'CoreApiMetricsProjectsResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The core_api_metrics_projects_results of this CoreApiMetricsProjectsResults.  # noqa: E501
        :rtype: CoreApiMetricsProjectsResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this CoreApiMetricsProjectsResults.


        :return: The active of this CoreApiMetricsProjectsResults.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this CoreApiMetricsProjectsResults.


        :param active: The active of this CoreApiMetricsProjectsResults.
        :type active: bool
        """

        self._active = active

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this CoreApiMetricsProjectsResults.


        :return: The last_updated of this CoreApiMetricsProjectsResults.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this CoreApiMetricsProjectsResults.


        :param last_updated: The last_updated of this CoreApiMetricsProjectsResults.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def project_is_public(self) -> bool:
        """Gets the project_is_public of this CoreApiMetricsProjectsResults.


        :return: The project_is_public of this CoreApiMetricsProjectsResults.
        :rtype: bool
        """
        return self._project_is_public

    @project_is_public.setter
    def project_is_public(self, project_is_public: bool):
        """Sets the project_is_public of this CoreApiMetricsProjectsResults.


        :param project_is_public: The project_is_public of this CoreApiMetricsProjectsResults.
        :type project_is_public: bool
        """

        self._project_is_public = project_is_public

    @property
    def project_type(self) -> str:
        """Gets the project_type of this CoreApiMetricsProjectsResults.


        :return: The project_type of this CoreApiMetricsProjectsResults.
        :rtype: str
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type: str):
        """Sets the project_type of this CoreApiMetricsProjectsResults.


        :param project_type: The project_type of this CoreApiMetricsProjectsResults.
        :type project_type: str
        """

        self._project_type = project_type

    @property
    def uuid(self) -> str:
        """Gets the uuid of this CoreApiMetricsProjectsResults.


        :return: The uuid of this CoreApiMetricsProjectsResults.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this CoreApiMetricsProjectsResults.


        :param uuid: The uuid of this CoreApiMetricsProjectsResults.
        :type uuid: str
        """

        self._uuid = uuid
