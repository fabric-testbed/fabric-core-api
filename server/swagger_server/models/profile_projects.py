# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.preferences import Preferences  # noqa: F401,E501
from swagger_server.models.reference import Reference  # noqa: F401,E501
from swagger_server import util


class ProfileProjects(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, award_information: str=None, goals: str=None, keywords: List[str]=None, notebooks: List[object]=None, preferences: Preferences=None, project_status: str=None, purpose: str=None, references: List[Reference]=None):  # noqa: E501
        """ProfileProjects - a model defined in Swagger

        :param award_information: The award_information of this ProfileProjects.  # noqa: E501
        :type award_information: str
        :param goals: The goals of this ProfileProjects.  # noqa: E501
        :type goals: str
        :param keywords: The keywords of this ProfileProjects.  # noqa: E501
        :type keywords: List[str]
        :param notebooks: The notebooks of this ProfileProjects.  # noqa: E501
        :type notebooks: List[object]
        :param preferences: The preferences of this ProfileProjects.  # noqa: E501
        :type preferences: Preferences
        :param project_status: The project_status of this ProfileProjects.  # noqa: E501
        :type project_status: str
        :param purpose: The purpose of this ProfileProjects.  # noqa: E501
        :type purpose: str
        :param references: The references of this ProfileProjects.  # noqa: E501
        :type references: List[Reference]
        """
        self.swagger_types = {
            'award_information': str,
            'goals': str,
            'keywords': List[str],
            'notebooks': List[object],
            'preferences': Preferences,
            'project_status': str,
            'purpose': str,
            'references': List[Reference]
        }

        self.attribute_map = {
            'award_information': 'award_information',
            'goals': 'goals',
            'keywords': 'keywords',
            'notebooks': 'notebooks',
            'preferences': 'preferences',
            'project_status': 'project_status',
            'purpose': 'purpose',
            'references': 'references'
        }
        self._award_information = award_information
        self._goals = goals
        self._keywords = keywords
        self._notebooks = notebooks
        self._preferences = preferences
        self._project_status = project_status
        self._purpose = purpose
        self._references = references

    @classmethod
    def from_dict(cls, dikt) -> 'ProfileProjects':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The profile_projects of this ProfileProjects.  # noqa: E501
        :rtype: ProfileProjects
        """
        return util.deserialize_model(dikt, cls)

    @property
    def award_information(self) -> str:
        """Gets the award_information of this ProfileProjects.


        :return: The award_information of this ProfileProjects.
        :rtype: str
        """
        return self._award_information

    @award_information.setter
    def award_information(self, award_information: str):
        """Sets the award_information of this ProfileProjects.


        :param award_information: The award_information of this ProfileProjects.
        :type award_information: str
        """

        self._award_information = award_information

    @property
    def goals(self) -> str:
        """Gets the goals of this ProfileProjects.


        :return: The goals of this ProfileProjects.
        :rtype: str
        """
        return self._goals

    @goals.setter
    def goals(self, goals: str):
        """Sets the goals of this ProfileProjects.


        :param goals: The goals of this ProfileProjects.
        :type goals: str
        """

        self._goals = goals

    @property
    def keywords(self) -> List[str]:
        """Gets the keywords of this ProfileProjects.


        :return: The keywords of this ProfileProjects.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: List[str]):
        """Sets the keywords of this ProfileProjects.


        :param keywords: The keywords of this ProfileProjects.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def notebooks(self) -> List[object]:
        """Gets the notebooks of this ProfileProjects.


        :return: The notebooks of this ProfileProjects.
        :rtype: List[object]
        """
        return self._notebooks

    @notebooks.setter
    def notebooks(self, notebooks: List[object]):
        """Sets the notebooks of this ProfileProjects.


        :param notebooks: The notebooks of this ProfileProjects.
        :type notebooks: List[object]
        """

        self._notebooks = notebooks

    @property
    def preferences(self) -> Preferences:
        """Gets the preferences of this ProfileProjects.


        :return: The preferences of this ProfileProjects.
        :rtype: Preferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences: Preferences):
        """Sets the preferences of this ProfileProjects.


        :param preferences: The preferences of this ProfileProjects.
        :type preferences: Preferences
        """

        self._preferences = preferences

    @property
    def project_status(self) -> str:
        """Gets the project_status of this ProfileProjects.


        :return: The project_status of this ProfileProjects.
        :rtype: str
        """
        return self._project_status

    @project_status.setter
    def project_status(self, project_status: str):
        """Sets the project_status of this ProfileProjects.


        :param project_status: The project_status of this ProfileProjects.
        :type project_status: str
        """

        self._project_status = project_status

    @property
    def purpose(self) -> str:
        """Gets the purpose of this ProfileProjects.


        :return: The purpose of this ProfileProjects.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose: str):
        """Sets the purpose of this ProfileProjects.


        :param purpose: The purpose of this ProfileProjects.
        :type purpose: str
        """

        self._purpose = purpose

    @property
    def references(self) -> List[Reference]:
        """Gets the references of this ProfileProjects.


        :return: The references of this ProfileProjects.
        :rtype: List[Reference]
        """
        return self._references

    @references.setter
    def references(self, references: List[Reference]):
        """Sets the references of this ProfileProjects.


        :param references: The references of this ProfileProjects.
        :type references: List[Reference]
        """

        self._references = references
