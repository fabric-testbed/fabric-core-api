# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.person import Person  # noqa: F401,E501
from swagger_server.models.preferences import Preferences  # noqa: F401,E501
from swagger_server.models.profile_projects import ProfileProjects  # noqa: F401,E501
from swagger_server.models.project_membership import ProjectMembership  # noqa: F401,E501
from swagger_server.models.storage_one import StorageOne  # noqa: F401,E501
from swagger_server import util


class ProjectsOne(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: bool=True, created: datetime=None, description: str=None, expires_on: str=None, facility: str=None, is_locked: bool=False, is_public: bool=True, memberships: ProjectMembership=None, modified: datetime=None, name: str=None, preferences: Preferences=None, profile: ProfileProjects=None, project_creators: List[Person]=None, project_members: List[Person]=None, project_owners: List[Person]=None, project_storage: List[StorageOne]=None, tags: List[str]=None, token_holders: List[Person]=None, uuid: str=None):  # noqa: E501
        """ProjectsOne - a model defined in Swagger

        :param active: The active of this ProjectsOne.  # noqa: E501
        :type active: bool
        :param created: The created of this ProjectsOne.  # noqa: E501
        :type created: datetime
        :param description: The description of this ProjectsOne.  # noqa: E501
        :type description: str
        :param expires_on: The expires_on of this ProjectsOne.  # noqa: E501
        :type expires_on: str
        :param facility: The facility of this ProjectsOne.  # noqa: E501
        :type facility: str
        :param is_locked: The is_locked of this ProjectsOne.  # noqa: E501
        :type is_locked: bool
        :param is_public: The is_public of this ProjectsOne.  # noqa: E501
        :type is_public: bool
        :param memberships: The memberships of this ProjectsOne.  # noqa: E501
        :type memberships: ProjectMembership
        :param modified: The modified of this ProjectsOne.  # noqa: E501
        :type modified: datetime
        :param name: The name of this ProjectsOne.  # noqa: E501
        :type name: str
        :param preferences: The preferences of this ProjectsOne.  # noqa: E501
        :type preferences: Preferences
        :param profile: The profile of this ProjectsOne.  # noqa: E501
        :type profile: ProfileProjects
        :param project_creators: The project_creators of this ProjectsOne.  # noqa: E501
        :type project_creators: List[Person]
        :param project_members: The project_members of this ProjectsOne.  # noqa: E501
        :type project_members: List[Person]
        :param project_owners: The project_owners of this ProjectsOne.  # noqa: E501
        :type project_owners: List[Person]
        :param project_storage: The project_storage of this ProjectsOne.  # noqa: E501
        :type project_storage: List[StorageOne]
        :param tags: The tags of this ProjectsOne.  # noqa: E501
        :type tags: List[str]
        :param token_holders: The token_holders of this ProjectsOne.  # noqa: E501
        :type token_holders: List[Person]
        :param uuid: The uuid of this ProjectsOne.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'active': bool,
            'created': datetime,
            'description': str,
            'expires_on': str,
            'facility': str,
            'is_locked': bool,
            'is_public': bool,
            'memberships': ProjectMembership,
            'modified': datetime,
            'name': str,
            'preferences': Preferences,
            'profile': ProfileProjects,
            'project_creators': List[Person],
            'project_members': List[Person],
            'project_owners': List[Person],
            'project_storage': List[StorageOne],
            'tags': List[str],
            'token_holders': List[Person],
            'uuid': str
        }

        self.attribute_map = {
            'active': 'active',
            'created': 'created',
            'description': 'description',
            'expires_on': 'expires_on',
            'facility': 'facility',
            'is_locked': 'is_locked',
            'is_public': 'is_public',
            'memberships': 'memberships',
            'modified': 'modified',
            'name': 'name',
            'preferences': 'preferences',
            'profile': 'profile',
            'project_creators': 'project_creators',
            'project_members': 'project_members',
            'project_owners': 'project_owners',
            'project_storage': 'project_storage',
            'tags': 'tags',
            'token_holders': 'token_holders',
            'uuid': 'uuid'
        }
        self._active = active
        self._created = created
        self._description = description
        self._expires_on = expires_on
        self._facility = facility
        self._is_locked = is_locked
        self._is_public = is_public
        self._memberships = memberships
        self._modified = modified
        self._name = name
        self._preferences = preferences
        self._profile = profile
        self._project_creators = project_creators
        self._project_members = project_members
        self._project_owners = project_owners
        self._project_storage = project_storage
        self._tags = tags
        self._token_holders = token_holders
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectsOne':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The projects_one of this ProjectsOne.  # noqa: E501
        :rtype: ProjectsOne
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this ProjectsOne.


        :return: The active of this ProjectsOne.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this ProjectsOne.


        :param active: The active of this ProjectsOne.
        :type active: bool
        """

        self._active = active

    @property
    def created(self) -> datetime:
        """Gets the created of this ProjectsOne.


        :return: The created of this ProjectsOne.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this ProjectsOne.


        :param created: The created of this ProjectsOne.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def description(self) -> str:
        """Gets the description of this ProjectsOne.


        :return: The description of this ProjectsOne.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProjectsOne.


        :param description: The description of this ProjectsOne.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def expires_on(self) -> str:
        """Gets the expires_on of this ProjectsOne.


        :return: The expires_on of this ProjectsOne.
        :rtype: str
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on: str):
        """Sets the expires_on of this ProjectsOne.


        :param expires_on: The expires_on of this ProjectsOne.
        :type expires_on: str
        """

        self._expires_on = expires_on

    @property
    def facility(self) -> str:
        """Gets the facility of this ProjectsOne.


        :return: The facility of this ProjectsOne.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility: str):
        """Sets the facility of this ProjectsOne.


        :param facility: The facility of this ProjectsOne.
        :type facility: str
        """
        if facility is None:
            raise ValueError("Invalid value for `facility`, must not be `None`")  # noqa: E501

        self._facility = facility

    @property
    def is_locked(self) -> bool:
        """Gets the is_locked of this ProjectsOne.


        :return: The is_locked of this ProjectsOne.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked: bool):
        """Sets the is_locked of this ProjectsOne.


        :param is_locked: The is_locked of this ProjectsOne.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def is_public(self) -> bool:
        """Gets the is_public of this ProjectsOne.


        :return: The is_public of this ProjectsOne.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public: bool):
        """Sets the is_public of this ProjectsOne.


        :param is_public: The is_public of this ProjectsOne.
        :type is_public: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    @property
    def memberships(self) -> ProjectMembership:
        """Gets the memberships of this ProjectsOne.


        :return: The memberships of this ProjectsOne.
        :rtype: ProjectMembership
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships: ProjectMembership):
        """Sets the memberships of this ProjectsOne.


        :param memberships: The memberships of this ProjectsOne.
        :type memberships: ProjectMembership
        """
        if memberships is None:
            raise ValueError("Invalid value for `memberships`, must not be `None`")  # noqa: E501

        self._memberships = memberships

    @property
    def modified(self) -> datetime:
        """Gets the modified of this ProjectsOne.


        :return: The modified of this ProjectsOne.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified: datetime):
        """Sets the modified of this ProjectsOne.


        :param modified: The modified of this ProjectsOne.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def name(self) -> str:
        """Gets the name of this ProjectsOne.


        :return: The name of this ProjectsOne.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProjectsOne.


        :param name: The name of this ProjectsOne.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def preferences(self) -> Preferences:
        """Gets the preferences of this ProjectsOne.


        :return: The preferences of this ProjectsOne.
        :rtype: Preferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences: Preferences):
        """Sets the preferences of this ProjectsOne.


        :param preferences: The preferences of this ProjectsOne.
        :type preferences: Preferences
        """

        self._preferences = preferences

    @property
    def profile(self) -> ProfileProjects:
        """Gets the profile of this ProjectsOne.


        :return: The profile of this ProjectsOne.
        :rtype: ProfileProjects
        """
        return self._profile

    @profile.setter
    def profile(self, profile: ProfileProjects):
        """Sets the profile of this ProjectsOne.


        :param profile: The profile of this ProjectsOne.
        :type profile: ProfileProjects
        """

        self._profile = profile

    @property
    def project_creators(self) -> List[Person]:
        """Gets the project_creators of this ProjectsOne.


        :return: The project_creators of this ProjectsOne.
        :rtype: List[Person]
        """
        return self._project_creators

    @project_creators.setter
    def project_creators(self, project_creators: List[Person]):
        """Sets the project_creators of this ProjectsOne.


        :param project_creators: The project_creators of this ProjectsOne.
        :type project_creators: List[Person]
        """

        self._project_creators = project_creators

    @property
    def project_members(self) -> List[Person]:
        """Gets the project_members of this ProjectsOne.


        :return: The project_members of this ProjectsOne.
        :rtype: List[Person]
        """
        return self._project_members

    @project_members.setter
    def project_members(self, project_members: List[Person]):
        """Sets the project_members of this ProjectsOne.


        :param project_members: The project_members of this ProjectsOne.
        :type project_members: List[Person]
        """

        self._project_members = project_members

    @property
    def project_owners(self) -> List[Person]:
        """Gets the project_owners of this ProjectsOne.


        :return: The project_owners of this ProjectsOne.
        :rtype: List[Person]
        """
        return self._project_owners

    @project_owners.setter
    def project_owners(self, project_owners: List[Person]):
        """Sets the project_owners of this ProjectsOne.


        :param project_owners: The project_owners of this ProjectsOne.
        :type project_owners: List[Person]
        """

        self._project_owners = project_owners

    @property
    def project_storage(self) -> List[StorageOne]:
        """Gets the project_storage of this ProjectsOne.


        :return: The project_storage of this ProjectsOne.
        :rtype: List[StorageOne]
        """
        return self._project_storage

    @project_storage.setter
    def project_storage(self, project_storage: List[StorageOne]):
        """Sets the project_storage of this ProjectsOne.


        :param project_storage: The project_storage of this ProjectsOne.
        :type project_storage: List[StorageOne]
        """

        self._project_storage = project_storage

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this ProjectsOne.


        :return: The tags of this ProjectsOne.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this ProjectsOne.


        :param tags: The tags of this ProjectsOne.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def token_holders(self) -> List[Person]:
        """Gets the token_holders of this ProjectsOne.


        :return: The token_holders of this ProjectsOne.
        :rtype: List[Person]
        """
        return self._token_holders

    @token_holders.setter
    def token_holders(self, token_holders: List[Person]):
        """Sets the token_holders of this ProjectsOne.


        :param token_holders: The token_holders of this ProjectsOne.
        :type token_holders: List[Person]
        """

        self._token_holders = token_holders

    @property
    def uuid(self) -> str:
        """Gets the uuid of this ProjectsOne.


        :return: The uuid of this ProjectsOne.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this ProjectsOne.


        :param uuid: The uuid of this ProjectsOne.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid
