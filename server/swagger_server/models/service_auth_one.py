# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.people_one_roles import PeopleOneRoles  # noqa: F401,E501
from swagger_server import util


class ServiceAuthOne(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, email: str=None, name: str=None, roles: List[PeopleOneRoles]=None, uuid: str=None):  # noqa: E501
        """ServiceAuthOne - a model defined in Swagger

        :param email: The email of this ServiceAuthOne.  # noqa: E501
        :type email: str
        :param name: The name of this ServiceAuthOne.  # noqa: E501
        :type name: str
        :param roles: The roles of this ServiceAuthOne.  # noqa: E501
        :type roles: List[PeopleOneRoles]
        :param uuid: The uuid of this ServiceAuthOne.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'email': str,
            'name': str,
            'roles': List[PeopleOneRoles],
            'uuid': str
        }

        self.attribute_map = {
            'email': 'email',
            'name': 'name',
            'roles': 'roles',
            'uuid': 'uuid'
        }
        self._email = email
        self._name = name
        self._roles = roles
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceAuthOne':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The service_auth_one of this ServiceAuthOne.  # noqa: E501
        :rtype: ServiceAuthOne
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self) -> str:
        """Gets the email of this ServiceAuthOne.


        :return: The email of this ServiceAuthOne.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ServiceAuthOne.


        :param email: The email of this ServiceAuthOne.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def name(self) -> str:
        """Gets the name of this ServiceAuthOne.


        :return: The name of this ServiceAuthOne.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ServiceAuthOne.


        :param name: The name of this ServiceAuthOne.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def roles(self) -> List[PeopleOneRoles]:
        """Gets the roles of this ServiceAuthOne.


        :return: The roles of this ServiceAuthOne.
        :rtype: List[PeopleOneRoles]
        """
        return self._roles

    @roles.setter
    def roles(self, roles: List[PeopleOneRoles]):
        """Sets the roles of this ServiceAuthOne.


        :param roles: The roles of this ServiceAuthOne.
        :type roles: List[PeopleOneRoles]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501

        self._roles = roles

    @property
    def uuid(self) -> str:
        """Gets the uuid of this ServiceAuthOne.


        :return: The uuid of this ServiceAuthOne.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this ServiceAuthOne.


        :param uuid: The uuid of this ServiceAuthOne.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid
