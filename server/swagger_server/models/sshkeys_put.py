# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SshkeysPut(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, description: str=None, keytype: str='sliver', public_openssh: str=None):  # noqa: E501
        """SshkeysPut - a model defined in Swagger

        :param description: The description of this SshkeysPut.  # noqa: E501
        :type description: str
        :param keytype: The keytype of this SshkeysPut.  # noqa: E501
        :type keytype: str
        :param public_openssh: The public_openssh of this SshkeysPut.  # noqa: E501
        :type public_openssh: str
        """
        self.swagger_types = {
            'description': str,
            'keytype': str,
            'public_openssh': str
        }

        self.attribute_map = {
            'description': 'description',
            'keytype': 'keytype',
            'public_openssh': 'public_openssh'
        }
        self._description = description
        self._keytype = keytype
        self._public_openssh = public_openssh

    @classmethod
    def from_dict(cls, dikt) -> 'SshkeysPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The sshkeys_put of this SshkeysPut.  # noqa: E501
        :rtype: SshkeysPut
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this SshkeysPut.


        :return: The description of this SshkeysPut.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this SshkeysPut.


        :param description: The description of this SshkeysPut.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def keytype(self) -> str:
        """Gets the keytype of this SshkeysPut.


        :return: The keytype of this SshkeysPut.
        :rtype: str
        """
        return self._keytype

    @keytype.setter
    def keytype(self, keytype: str):
        """Sets the keytype of this SshkeysPut.


        :param keytype: The keytype of this SshkeysPut.
        :type keytype: str
        """
        allowed_values = ["bastion", "sliver"]  # noqa: E501
        if keytype not in allowed_values:
            raise ValueError(
                "Invalid value for `keytype` ({0}), must be one of {1}"
                .format(keytype, allowed_values)
            )

        self._keytype = keytype

    @property
    def public_openssh(self) -> str:
        """Gets the public_openssh of this SshkeysPut.


        :return: The public_openssh of this SshkeysPut.
        :rtype: str
        """
        return self._public_openssh

    @public_openssh.setter
    def public_openssh(self, public_openssh: str):
        """Sets the public_openssh of this SshkeysPut.


        :param public_openssh: The public_openssh of this SshkeysPut.
        :type public_openssh: str
        """
        if public_openssh is None:
            raise ValueError("Invalid value for `public_openssh`, must not be `None`")  # noqa: E501

        self._public_openssh = public_openssh
