# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StorageOne(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: bool=None, created_on: datetime=None, expires_on: datetime=None, project_name: str=None, project_uuid: str=None, site_list: List[str]=None, uuid: str=None, volume_name: str=None, volume_size_gb: int=None):  # noqa: E501
        """StorageOne - a model defined in Swagger

        :param active: The active of this StorageOne.  # noqa: E501
        :type active: bool
        :param created_on: The created_on of this StorageOne.  # noqa: E501
        :type created_on: datetime
        :param expires_on: The expires_on of this StorageOne.  # noqa: E501
        :type expires_on: datetime
        :param project_name: The project_name of this StorageOne.  # noqa: E501
        :type project_name: str
        :param project_uuid: The project_uuid of this StorageOne.  # noqa: E501
        :type project_uuid: str
        :param site_list: The site_list of this StorageOne.  # noqa: E501
        :type site_list: List[str]
        :param uuid: The uuid of this StorageOne.  # noqa: E501
        :type uuid: str
        :param volume_name: The volume_name of this StorageOne.  # noqa: E501
        :type volume_name: str
        :param volume_size_gb: The volume_size_gb of this StorageOne.  # noqa: E501
        :type volume_size_gb: int
        """
        self.swagger_types = {
            'active': bool,
            'created_on': datetime,
            'expires_on': datetime,
            'project_name': str,
            'project_uuid': str,
            'site_list': List[str],
            'uuid': str,
            'volume_name': str,
            'volume_size_gb': int
        }

        self.attribute_map = {
            'active': 'active',
            'created_on': 'created_on',
            'expires_on': 'expires_on',
            'project_name': 'project_name',
            'project_uuid': 'project_uuid',
            'site_list': 'site_list',
            'uuid': 'uuid',
            'volume_name': 'volume_name',
            'volume_size_gb': 'volume_size_gb'
        }
        self._active = active
        self._created_on = created_on
        self._expires_on = expires_on
        self._project_name = project_name
        self._project_uuid = project_uuid
        self._site_list = site_list
        self._uuid = uuid
        self._volume_name = volume_name
        self._volume_size_gb = volume_size_gb

    @classmethod
    def from_dict(cls, dikt) -> 'StorageOne':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The storage_one of this StorageOne.  # noqa: E501
        :rtype: StorageOne
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this StorageOne.


        :return: The active of this StorageOne.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this StorageOne.


        :param active: The active of this StorageOne.
        :type active: bool
        """

        self._active = active

    @property
    def created_on(self) -> datetime:
        """Gets the created_on of this StorageOne.


        :return: The created_on of this StorageOne.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on: datetime):
        """Sets the created_on of this StorageOne.


        :param created_on: The created_on of this StorageOne.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def expires_on(self) -> datetime:
        """Gets the expires_on of this StorageOne.


        :return: The expires_on of this StorageOne.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on: datetime):
        """Sets the expires_on of this StorageOne.


        :param expires_on: The expires_on of this StorageOne.
        :type expires_on: datetime
        """

        self._expires_on = expires_on

    @property
    def project_name(self) -> str:
        """Gets the project_name of this StorageOne.


        :return: The project_name of this StorageOne.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: str):
        """Sets the project_name of this StorageOne.


        :param project_name: The project_name of this StorageOne.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def project_uuid(self) -> str:
        """Gets the project_uuid of this StorageOne.


        :return: The project_uuid of this StorageOne.
        :rtype: str
        """
        return self._project_uuid

    @project_uuid.setter
    def project_uuid(self, project_uuid: str):
        """Sets the project_uuid of this StorageOne.


        :param project_uuid: The project_uuid of this StorageOne.
        :type project_uuid: str
        """

        self._project_uuid = project_uuid

    @property
    def site_list(self) -> List[str]:
        """Gets the site_list of this StorageOne.


        :return: The site_list of this StorageOne.
        :rtype: List[str]
        """
        return self._site_list

    @site_list.setter
    def site_list(self, site_list: List[str]):
        """Sets the site_list of this StorageOne.


        :param site_list: The site_list of this StorageOne.
        :type site_list: List[str]
        """

        self._site_list = site_list

    @property
    def uuid(self) -> str:
        """Gets the uuid of this StorageOne.


        :return: The uuid of this StorageOne.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this StorageOne.


        :param uuid: The uuid of this StorageOne.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def volume_name(self) -> str:
        """Gets the volume_name of this StorageOne.


        :return: The volume_name of this StorageOne.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name: str):
        """Sets the volume_name of this StorageOne.


        :param volume_name: The volume_name of this StorageOne.
        :type volume_name: str
        """

        self._volume_name = volume_name

    @property
    def volume_size_gb(self) -> int:
        """Gets the volume_size_gb of this StorageOne.


        :return: The volume_size_gb of this StorageOne.
        :rtype: int
        """
        return self._volume_size_gb

    @volume_size_gb.setter
    def volume_size_gb(self, volume_size_gb: int):
        """Sets the volume_size_gb of this StorageOne.


        :param volume_size_gb: The volume_size_gb of this StorageOne.
        :type volume_size_gb: int
        """

        self._volume_size_gb = volume_size_gb
