# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StoragePost(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, expires_on: str=None, project_uuid: str=None, requested_by_uuid: str=None, site_list: List[str]=None, volume_name: str=None, volume_size_gb: int=None):  # noqa: E501
        """StoragePost - a model defined in Swagger

        :param expires_on: The expires_on of this StoragePost.  # noqa: E501
        :type expires_on: str
        :param project_uuid: The project_uuid of this StoragePost.  # noqa: E501
        :type project_uuid: str
        :param requested_by_uuid: The requested_by_uuid of this StoragePost.  # noqa: E501
        :type requested_by_uuid: str
        :param site_list: The site_list of this StoragePost.  # noqa: E501
        :type site_list: List[str]
        :param volume_name: The volume_name of this StoragePost.  # noqa: E501
        :type volume_name: str
        :param volume_size_gb: The volume_size_gb of this StoragePost.  # noqa: E501
        :type volume_size_gb: int
        """
        self.swagger_types = {
            'expires_on': str,
            'project_uuid': str,
            'requested_by_uuid': str,
            'site_list': List[str],
            'volume_name': str,
            'volume_size_gb': int
        }

        self.attribute_map = {
            'expires_on': 'expires_on',
            'project_uuid': 'project_uuid',
            'requested_by_uuid': 'requested_by_uuid',
            'site_list': 'site_list',
            'volume_name': 'volume_name',
            'volume_size_gb': 'volume_size_gb'
        }
        self._expires_on = expires_on
        self._project_uuid = project_uuid
        self._requested_by_uuid = requested_by_uuid
        self._site_list = site_list
        self._volume_name = volume_name
        self._volume_size_gb = volume_size_gb

    @classmethod
    def from_dict(cls, dikt) -> 'StoragePost':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The storage_post of this StoragePost.  # noqa: E501
        :rtype: StoragePost
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_on(self) -> str:
        """Gets the expires_on of this StoragePost.


        :return: The expires_on of this StoragePost.
        :rtype: str
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on: str):
        """Sets the expires_on of this StoragePost.


        :param expires_on: The expires_on of this StoragePost.
        :type expires_on: str
        """
        if expires_on is None:
            raise ValueError("Invalid value for `expires_on`, must not be `None`")  # noqa: E501

        self._expires_on = expires_on

    @property
    def project_uuid(self) -> str:
        """Gets the project_uuid of this StoragePost.


        :return: The project_uuid of this StoragePost.
        :rtype: str
        """
        return self._project_uuid

    @project_uuid.setter
    def project_uuid(self, project_uuid: str):
        """Sets the project_uuid of this StoragePost.


        :param project_uuid: The project_uuid of this StoragePost.
        :type project_uuid: str
        """
        if project_uuid is None:
            raise ValueError("Invalid value for `project_uuid`, must not be `None`")  # noqa: E501

        self._project_uuid = project_uuid

    @property
    def requested_by_uuid(self) -> str:
        """Gets the requested_by_uuid of this StoragePost.


        :return: The requested_by_uuid of this StoragePost.
        :rtype: str
        """
        return self._requested_by_uuid

    @requested_by_uuid.setter
    def requested_by_uuid(self, requested_by_uuid: str):
        """Sets the requested_by_uuid of this StoragePost.


        :param requested_by_uuid: The requested_by_uuid of this StoragePost.
        :type requested_by_uuid: str
        """
        if requested_by_uuid is None:
            raise ValueError("Invalid value for `requested_by_uuid`, must not be `None`")  # noqa: E501

        self._requested_by_uuid = requested_by_uuid

    @property
    def site_list(self) -> List[str]:
        """Gets the site_list of this StoragePost.


        :return: The site_list of this StoragePost.
        :rtype: List[str]
        """
        return self._site_list

    @site_list.setter
    def site_list(self, site_list: List[str]):
        """Sets the site_list of this StoragePost.


        :param site_list: The site_list of this StoragePost.
        :type site_list: List[str]
        """

        self._site_list = site_list

    @property
    def volume_name(self) -> str:
        """Gets the volume_name of this StoragePost.


        :return: The volume_name of this StoragePost.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name: str):
        """Sets the volume_name of this StoragePost.


        :param volume_name: The volume_name of this StoragePost.
        :type volume_name: str
        """
        if volume_name is None:
            raise ValueError("Invalid value for `volume_name`, must not be `None`")  # noqa: E501

        self._volume_name = volume_name

    @property
    def volume_size_gb(self) -> int:
        """Gets the volume_size_gb of this StoragePost.


        :return: The volume_size_gb of this StoragePost.
        :rtype: int
        """
        return self._volume_size_gb

    @volume_size_gb.setter
    def volume_size_gb(self, volume_size_gb: int):
        """Sets the volume_size_gb of this StoragePost.


        :param volume_size_gb: The volume_size_gb of this StoragePost.
        :type volume_size_gb: int
        """

        self._volume_size_gb = volume_size_gb
