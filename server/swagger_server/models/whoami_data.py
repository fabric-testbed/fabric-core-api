# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WhoamiData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active: bool=False, email: str=None, enrolled: bool=False, name: str=None, uuid: str=None):  # noqa: E501
        """WhoamiData - a model defined in Swagger

        :param active: The active of this WhoamiData.  # noqa: E501
        :type active: bool
        :param email: The email of this WhoamiData.  # noqa: E501
        :type email: str
        :param enrolled: The enrolled of this WhoamiData.  # noqa: E501
        :type enrolled: bool
        :param name: The name of this WhoamiData.  # noqa: E501
        :type name: str
        :param uuid: The uuid of this WhoamiData.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'active': bool,
            'email': str,
            'enrolled': bool,
            'name': str,
            'uuid': str
        }

        self.attribute_map = {
            'active': 'active',
            'email': 'email',
            'enrolled': 'enrolled',
            'name': 'name',
            'uuid': 'uuid'
        }
        self._active = active
        self._email = email
        self._enrolled = enrolled
        self._name = name
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'WhoamiData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The whoami_data of this WhoamiData.  # noqa: E501
        :rtype: WhoamiData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this WhoamiData.


        :return: The active of this WhoamiData.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this WhoamiData.


        :param active: The active of this WhoamiData.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def email(self) -> str:
        """Gets the email of this WhoamiData.


        :return: The email of this WhoamiData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this WhoamiData.


        :param email: The email of this WhoamiData.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def enrolled(self) -> bool:
        """Gets the enrolled of this WhoamiData.


        :return: The enrolled of this WhoamiData.
        :rtype: bool
        """
        return self._enrolled

    @enrolled.setter
    def enrolled(self, enrolled: bool):
        """Sets the enrolled of this WhoamiData.


        :param enrolled: The enrolled of this WhoamiData.
        :type enrolled: bool
        """
        if enrolled is None:
            raise ValueError("Invalid value for `enrolled`, must not be `None`")  # noqa: E501

        self._enrolled = enrolled

    @property
    def name(self) -> str:
        """Gets the name of this WhoamiData.


        :return: The name of this WhoamiData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this WhoamiData.


        :param name: The name of this WhoamiData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def uuid(self) -> str:
        """Gets the uuid of this WhoamiData.


        :return: The uuid of this WhoamiData.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this WhoamiData.


        :param uuid: The uuid of this WhoamiData.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid
