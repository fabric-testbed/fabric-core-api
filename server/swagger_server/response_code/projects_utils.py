import os
import logging
from swagger_server.database.db import db
from swagger_server.models.person import Person
from swagger_server.database.models.projects import FabricProjects, projects_creators, projects_members, projects_owners
from swagger_server.database.models.people import FabricGroups, FabricRoles, FabricPeople
from swagger_server.response_code.preferences_utils import create_projects_preferences
from swagger_server.response_code.profiles_utils import create_profile_projects
from swagger_server.models.project_membership import ProjectMembership

logger = logging.getLogger(__name__)


def create_fabric_project_from_api():
    """
    * Denotes required fields
    - *active
    - co_cou_id_pc
    - co_cou_id_pm
    - co_cou_id_po
    - *description
    - *facility
    - *is_public
    - *name
    - preferences
    - profile
    - project_creators
    - project_members
    - project_owners
    - publications
    - tags
    - *uuid

    {
        "description": "string",
        "is_public": true,
        "name": "string",
        "project_members": [
            "string"
        ],
        "project_owners": [
            "string"
        ]
    }
    """
    pass


def create_fabric_project_from_uuid(uuid: str) -> FabricProjects:
    """
    * Denotes required fields
    - *active
    - co_cou_id_pc
    - co_cou_id_pm
    - co_cou_id_po
    - *description
    - *facility
    - *is_public
    - *name
    - preferences
    - profile
    - project_creators
    - project_members
    - project_owners
    - publications
    - tags
    - *uuid
    """
    fab_project = FabricProjects.query.filter_by(uuid=uuid).one_or_none()
    if not fab_project:
        fab_project = FabricProjects()
        co_cou_pc = FabricGroups.query.filter_by(name=uuid + '-pc').one_or_none()
        if co_cou_pc:
            # set required fields
            fab_project.active = not co_cou_pc.deleted
            fab_project.created = co_cou_pc.created
            fab_project.description = co_cou_pc.description + ' (autogenerated by script)'
            fab_project.facility = os.getenv('CORE_API_DEFAULT_FACILITY')
            fab_project.is_public = True
            fab_project.name = co_cou_pc.description
            fab_project.uuid = uuid
            db.session.add(fab_project)
            db.session.commit()
            logger.info('CREATE FabricProject: name={0}, uuid={1}'.format(fab_project.name, fab_project.uuid))
            # set optional fields
            fab_project.co_cou_id_pc = co_cou_pc.co_cou_id
            co_cou_pm = FabricGroups.query.filter_by(name=uuid + '-pm').one_or_none()
            if co_cou_pm:
                fab_project.co_cou_id_pm = co_cou_pm.co_cou_id
            co_cou_po = FabricGroups.query.filter_by(name=uuid + '-po').one_or_none()
            if co_cou_po:
                fab_project.co_cou_id_po = co_cou_po.co_cou_id
            # set project preferences
            create_projects_preferences(fab_project=fab_project)
            # set project profile
            create_profile_projects(fab_project=fab_project)
            # set project creators
            for pc_id in [x.people_id for x in FabricRoles.query.filter_by(name=co_cou_pc.name)]:
                pc = FabricPeople.query.filter_by(id=pc_id).one_or_none()
                if pc:
                    fab_project.project_creators.append(pc)
            # set project members
            for pm_id in [x.people_id for x in FabricRoles.query.filter_by(name=co_cou_pm.name)]:
                pm = FabricPeople.query.filter_by(id=pm_id).one_or_none()
                if pm:
                    fab_project.project_members.append(pm)
            # set project owners
            for po_id in [x.people_id for x in FabricRoles.query.filter_by(name=co_cou_po.name)]:
                po = FabricPeople.query.filter_by(id=po_id).one_or_none()
                if po:
                    fab_project.project_owners.append(po)
            db.session.commit()
        else:
            logger.warning("NOT FOUND: create_fabric_project_from_uuid(): Unable to find cou with uuid: '{0}'".format(uuid))

    return fab_project


def get_project_membership(fab_project: FabricProjects, fab_person: FabricPeople) -> ProjectMembership:
    membership = ProjectMembership()
    person_roles = [r.name for r in fab_person.roles]
    membership.is_creator = fab_project.uuid + '-pc' in person_roles
    membership.is_member = fab_project.uuid + '-pm' in person_roles
    membership.is_owner = fab_project.uuid + '-po' in person_roles

    return membership


# Creators, Owners and Members - Projects
def get_projects_personnel(fab_project: FabricProjects = None, personnel_type: str = None) -> [Person]:
    """
    * Denotes required fields
    - email: <string>
    - * name: <string>
    - * uuid: <string>
    """
    personnel = []
    if personnel_type == 'creators':
        personnel = fab_project.project_creators
    elif personnel_type == 'owners':
        personnel = fab_project.project_owners
    elif personnel_type == 'members':
        personnel = fab_project.project_members
    personnel_data = []
    for p in personnel:
        # get preferences (show_email)
        prefs = {pref.key: pref.value for pref in p.preferences}
        # set person attributes
        person = Person()
        person.email = p.preferred_email if prefs.get('show_email') else None
        person.name = p.display_name
        person.uuid = p.uuid
        # add person to personnel_data
        personnel_data.append(person)

    return personnel_data
